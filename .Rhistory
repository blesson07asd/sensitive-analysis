# Load the data
data <- read.csv("DailyDelhiClimateTest.csv", stringsAsFactors = FALSE)
# Clean the data by removing rows with missing values
data_clean <- data %>% drop_na()
# Save the cleaned data (optional)
write.csv(data_clean, "data_clean.csv", row.names = FALSE)
# View the first few rows of cleaned data
head(data_clean)
# Load necessary libraries
library(randtoolbox)
# Fit a linear regression model using humidity, wind_speed, and meanpressure
lm_model <- lm(meantemp ~ humidity + wind_speed + meanpressure, data = data_clean)
# View the summary of the model to understand the coefficients
summary(lm_model)
# Define parameter ranges for Sobol sequences
humidity_range <- range(data_clean$humidity)
wind_speed_range <- range(data_clean$wind_speed)
meanpressure_range <- range(data_clean$meanpressure)
# Sobol sequence parameters
n <- 1000
d <- 3  # humidity, wind_speed, meanpressure
# Generate Sobol sequences
sobol_sequence_X1 <- sobol(n, dim = d, init = TRUE)
sobol_sequence_X2 <- sobol(n, dim = d, init = FALSE)
# Scale Sobol sequences to the parameter ranges and convert to data frames
lower_bounds <- c(humidity_range[1], wind_speed_range[1], meanpressure_range[1])
upper_bounds <- c(humidity_range[2], wind_speed_range[2], meanpressure_range[2])
X1 <- as.data.frame(t(t(sobol_sequence_X1) * (upper_bounds - lower_bounds) + lower_bounds))
X2 <- as.data.frame(t(t(sobol_sequence_X2) * (upper_bounds - lower_bounds) + lower_bounds))
# Assign unique row names to avoid conflicts
rownames(X1) <- paste0("X1_", 1:n)
rownames(X2) <- paste0("X2_", 1:n)
# Define the model function that uses the fitted linear regression model
sobol_model <- function(X) {
# Predict meantemp using the fitted lm_model coefficients
predicted_meantemp <- predict(lm_model, newdata = data.frame(humidity = X[, 1],
wind_speed = X[, 2],
meanpressure = X[, 3]))
return(predicted_meantemp)
}
# Perform Sobol sensitivity analysis
sobol_results <- sobol2007(
model = sobol_model,
X1 = X1,
X2 = X2,
nboot = 1000
)
# Print sensitivity indices
print(sobol_results)
# Load required libraries
library(ggplot2)
# Extract Sobol indices from the results
sobol_indices <- data.frame(
Parameter = c("Humidity", "Wind Speed", "Mean Pressure"),
First_Order = sobol_results$S[, 1],  # First-order indices
Total_Order = sobol_results$T[, 1]   # Total-order indices
)
# Reshape the data for plotting
sobol_indices_long <- sobol_indices %>%
pivot_longer(cols = c(First_Order, Total_Order),
names_to = "Index_Type",
values_to = "Value")
# Create the bar plot
ggplot(sobol_indices_long, aes(x = Parameter, y = Value, fill = Index_Type)) +
geom_bar(stat = "identity", position = position_dodge()) +
labs(
title = "Sobol Sensitivity Indices",
x = "Parameter",
y = "Sobol Index",
fill = "Index Type"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
# Example scatter plot for humidity vs. mean temperature
ggplot(data_clean, aes(x = humidity, y = meantemp)) +
geom_point(alpha = 0.5) +
labs(
title = "Humidity vs. Mean Temperature",
x = "Humidity",
y = "Mean Temperature"
) +
theme_minimal()
# Create the bar plot
ggplot(sobol_indices_long, aes(x = Parameter, y = Value, fill = Index_Type)) +
geom_bar(stat = "identity", position = position_dodge()) +
labs(
title = "Sobol Sensitivity Indices",
x = "Parameter",
y = "Sobol Index",
fill = "Index Type"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
library(dplyr)
library(tidyr)
library(sensitivity)
#setwd("C:\\Users\\LENOVO\\Documents\\PROJECTS\\sensitive analysis")
# Load the data
data <- read.csv("DailyDelhiClimateTest.csv", stringsAsFactors = FALSE)
# Clean the data by removing rows with missing values
data_clean <- data %>% drop_na()
# Save the cleaned data (optional)
write.csv(data_clean, "data_clean.csv", row.names = FALSE)
# View the first few rows of cleaned data
head(data_clean)
# Load necessary libraries
library(randtoolbox)
# Fit a linear regression model using humidity, wind_speed, and meanpressure
lm_model <- lm(meantemp ~ humidity + wind_speed + meanpressure, data = data_clean)
# View the summary of the model to understand the coefficients
summary(lm_model)
# Define parameter ranges for Sobol sequences
humidity_range <- range(data_clean$humidity)
wind_speed_range <- range(data_clean$wind_speed)
meanpressure_range <- range(data_clean$meanpressure)
# Sobol sequence parameters
n <- 1000
d <- 3  # humidity, wind_speed, meanpressure
# Generate Sobol sequences
sobol_sequence_X1 <- sobol(n, dim = d, init = TRUE)
sobol_sequence_X2 <- sobol(n, dim = d, init = FALSE)
# Scale Sobol sequences to the parameter ranges and convert to data frames
lower_bounds <- c(humidity_range[1], wind_speed_range[1], meanpressure_range[1])
upper_bounds <- c(humidity_range[2], wind_speed_range[2], meanpressure_range[2])
X1 <- as.data.frame(t(t(sobol_sequence_X1) * (upper_bounds - lower_bounds) + lower_bounds))
X2 <- as.data.frame(t(t(sobol_sequence_X2) * (upper_bounds - lower_bounds) + lower_bounds))
# Assign unique row names to avoid conflicts
rownames(X1) <- paste0("X1_", 1:n)
rownames(X2) <- paste0("X2_", 1:n)
# Define the model function that uses the fitted linear regression model
sobol_model <- function(X) {
# Predict meantemp using the fitted lm_model coefficients
predicted_meantemp <- predict(lm_model, newdata = data.frame(humidity = X[, 1],
wind_speed = X[, 2],
meanpressure = X[, 3]))
return(predicted_meantemp)
}
# Perform Sobol sensitivity analysis
sobol_results <- sobol2007(
model = sobol_model,
X1 = X1,
X2 = X2,
nboot = 1000
)
# Print sensitivity indices
print(sobol_results)
# View the summary of the model to understand the coefficients
summary(lm_model)
View(data_clean)
library(dplyr)
library(tidyr)
library(sensitivity)
#setwd("C:\\Users\\LENOVO\\Documents\\PROJECTS\\sensitive analysis")
# Load the data
data <- read.csv("DailyDelhiClimateTest.csv", stringsAsFactors = FALSE)
# Clean the data by removing rows with missing values
data_clean <- data %>% drop_na()
# Save the cleaned data (optional)
write.csv(data_clean, "data_clean.csv", row.names = FALSE)
# View the first few rows of cleaned data
head(data_clean)
# Load necessary libraries
library(randtoolbox)
# Fit a linear regression model using humidity, wind_speed, and meanpressure
lm_model <- lm(meantemp ~ humidity + wind_speed + meanpressure, data = data_clean)
# View the summary of the model to understand the coefficients
summary(lm_model)
# Define parameter ranges for Sobol sequences
humidity_range <- range(data_clean$humidity)
wind_speed_range <- range(data_clean$wind_speed)
meanpressure_range <- range(data_clean$meanpressure)
# Sobol sequence parameters
n <- 1000
d <- 3  # humidity, wind_speed, meanpressure
# Generate Sobol sequences
sobol_sequence_X1 <- sobol(n, dim = d, init = TRUE)
sobol_sequence_X2 <- sobol(n, dim = d, init = FALSE)
sobol_sequence_X1
sobol_sequence_X2
# Generate Sobol sequences
sobol_sequence_X1 <- sobol(n, dim = d, init = TRUE)
sobol_sequence_X2 <- sobol(n, dim = d, init = FALSE)
# Scale Sobol sequences to the parameter ranges and convert to data frames
lower_bounds <- c(humidity_range[1], wind_speed_range[1], meanpressure_range[1])
upper_bounds <- c(humidity_range[2], wind_speed_range[2], meanpressure_range[2])
lower_bounds
humidity_range
# Load necessary libraries
library(randtoolbox)
# Fit a linear regression model using humidity, wind_speed, and meanpressure
lm_model <- lm(meantemp ~ humidity + wind_speed + meanpressure, data = data_clean)
# View the summary of the model to understand the coefficients
summary(lm_model)
# Define parameter ranges for Sobol sequences
humidity_range <- range(data_clean$humidity)
wind_speed_range <- range(data_clean$wind_speed)
meanpressure_range <- range(data_clean$meanpressure)
humidity_range
# Generate Sobol sequences
sobol_sequence_X1 <- sobol(n=1000, dim = 3, init = TRUE)
sobol_sequence_X2 <- sobol(n=1000, dim = 3, init = FALSE)
# Scale Sobol sequences to the parameter ranges and convert to data frames
lower_bounds <- c(humidity_range[1], wind_speed_range[1], meanpressure_range[1])
upper_bounds <- c(humidity_range[2], wind_speed_range[2], meanpressure_range[2])
lower_bounds
library(dplyr)
#library(tidyr)
library(sensitivity)
library(randtoolbox)
data <- read.csv("DailyDelhiClimateTest.csv", stringsAsFactors = FALSE)
library(tidyr)
library(sensitivity)
library(randtoolbox)
data <- read.csv("DailyDelhiClimateTest.csv", stringsAsFactors = FALSE)
data_clean <- data %>% drop_na() #removing rows with missing values
library(dplyr)
library(tidyr)
library(sensitivity)
library(randtoolbox)
data <- read.csv("DailyDelhiClimateTest.csv", stringsAsFactors = FALSE)
library(dplyr)
library(tidyr)
library(sensitivity)
library(randtoolbox)
data <- read.csv("DailyDelhiClimateTest.csv", stringsAsFactors = FALSE)
data_clean <- data %>% drop_na() #removing rows with missing values
write.csv(data_clean, "data_clean.csv", row.names = FALSE) # Save the cleaned data
head(data_clean)
library(dplyr)
#library(tidyr)
library(sensitivity)
library(randtoolbox)
data <- read.csv("DailyDelhiClimateTest.csv", stringsAsFactors = FALSE)
data_clean <- data %>% drop_na() #removing rows with missing values
write.csv(data_clean, "data_clean.csv", row.names = FALSE) # Save the cleaned data
head(data_clean)
# Fit a linear regression model using humidity, wind_speed, and meanpressure
lm_model <- lm(meantemp ~ humidity + wind_speed + meanpressure, data = data_clean)
# View the summary of the model to understand the coefficients
summary(lm_model)
# Define parameter ranges for Sobol sequences
humidity_range <- range(data_clean$humidity)
wind_speed_range <- range(data_clean$wind_speed)
meanpressure_range <- range(data_clean$meanpressure)
# Generate Sobol sequences
sobol_sequence_X1 <- sobol(n=1000, dim = 3, init = TRUE)
sobol_sequence_X2 <- sobol(n=1000, dim = 3, init = FALSE)
# Scale Sobol sequences to the parameter ranges and convert to data frames
lower_bounds <- c(humidity_range[1], wind_speed_range[1], meanpressure_range[1])
upper_bounds <- c(humidity_range[2], wind_speed_range[2], meanpressure_range[2])
X1 <- as.data.frame(t(t(sobol_sequence_X1) * (upper_bounds - lower_bounds) + lower_bounds))
X2 <- as.data.frame(t(t(sobol_sequence_X2) * (upper_bounds - lower_bounds) + lower_bounds))
# Assign unique row names to avoid conflicts
rownames(X1) <- paste0("X1_", 1:n)
rownames(X2) <- paste0("X2_", 1:n)
# Define the model function that uses the fitted linear regression model
sobol_model <- function(X) {
# Predict meantemp using the fitted lm_model coefficients
predicted_meantemp <- predict(lm_model, newdata = data.frame(humidity = X[, 1],
wind_speed = X[, 2],
meanpressure = X[, 3]))
return(predicted_meantemp)
}
# Perform Sobol sensitivity analysis
sobol_results <- sobol2007(
model = sobol_model,
X1 = X1,
X2 = X2,
nboot = 1000
)
# Print sensitivity indices
print(sobol_results)
# Load required libraries
library(ggplot2)
# Extract Sobol indices from the results
sobol_indices <- data.frame(
Parameter = c("Humidity", "Wind Speed", "Mean Pressure"),
First_Order = sobol_results$S[, 1],  # First-order indices
Total_Order = sobol_results$T[, 1]   # Total-order indices
)
# Reshape the data for plotting
sobol_indices_long <- sobol_indices %>%
pivot_longer(cols = c(First_Order, Total_Order),
names_to = "Index_Type",
values_to = "Value")
# Create the bar plot
ggplot(sobol_indices_long, aes(x = Parameter, y = Value, fill = Index_Type)) +
geom_bar(stat = "identity", position = position_dodge()) +
labs(
title = "Sobol Sensitivity Indices",
x = "Parameter",
y = "Sobol Index",
fill = "Index Type"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
# Example scatter plot for humidity vs. mean temperature
ggplot(data_clean, aes(x = humidity, y = meantemp)) +
geom_point(alpha = 0.5) +
labs(
title = "Humidity vs. Mean Temperature",
x = "Humidity",
y = "Mean Temperature"
) +
theme_minimal()
# Create the bar plot
ggplot(sobol_indices_long, aes(x = Parameter, y = Value, fill = Index_Type)) +
geom_bar(stat = "identity", position = position_dodge()) +
labs(
title = "Sobol Sensitivity Indices",
x = "Parameter",
y = "Sobol Index",
fill = "Index Type"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
library(dplyr)
#library(tidyr)
library(sensitivity)
library(randtoolbox)
data <- read.csv("DailyDelhiClimateTest.csv", stringsAsFactors = FALSE)
data_clean <- data %>% drop_na() #removing rows with missing values
write.csv(data_clean, "data_clean.csv", row.names = FALSE) # Save the cleaned data
head(data_clean)
lm_model <- lm(meantemp ~ humidity + wind_speed + meanpressure, data = data_clean) #Fit a linear regression model
# View the summary of the model to understand the coefficients
summary(lm_model)
# Define parameter ranges for Sobol sequences
humidity_range <- range(data_clean$humidity)
wind_speed_range <- range(data_clean$wind_speed)
meanpressure_range <- range(data_clean$meanpressure)
#Sobol sequences
sobol_sequence_X1 <- sobol(n=1000, dim = 3, init = TRUE)
sobol_sequence_X2 <- sobol(n=1000, dim = 3, init = FALSE)
# Scale Sobol sequences to the parameter ranges and convert to data frames
lower_bounds <- c(humidity_range[1], wind_speed_range[1], meanpressure_range[1])
upper_bounds <- c(humidity_range[2], wind_speed_range[2], meanpressure_range[2])
X1 <- as.data.frame(t(t(sobol_sequence_X1) * (upper_bounds - lower_bounds) + lower_bounds))
X2 <- as.data.frame(t(t(sobol_sequence_X2) * (upper_bounds - lower_bounds) + lower_bounds))
# Define the model function that uses the fitted linear regression model
sobol_model <- function(X) {
# Predict meantemp using the fitted lm_model coefficients
predicted_meantemp <- predict(lm_model, newdata = data.frame(humidity = X[, 1],
wind_speed = X[, 2],
meanpressure = X[, 3]))
return(predicted_meantemp)
}
# Perform Sobol sensitivity analysis
sobol_results <- sobol2007(
model = sobol_model,
X1 = X1,
X2 = X2,
nboot = 1000
)
# Print sensitivity indices
print(sobol_results)
# Load required libraries
library(ggplot2)
# Extract Sobol indices from the results
sobol_indices <- data.frame(
Parameter = c("Humidity", "Wind Speed", "Mean Pressure"),
First_Order = sobol_results$S[, 1],  # First-order indices
Total_Order = sobol_results$T[, 1]   # Total-order indices
)
# Reshape the data for plotting
sobol_indices_long <- sobol_indices %>%
pivot_longer(cols = c(First_Order, Total_Order),
names_to = "Index_Type",
values_to = "Value")
# Create the bar plot
ggplot(sobol_indices_long, aes(x = Parameter, y = Value, fill = Index_Type)) +
geom_bar(stat = "identity", position = position_dodge()) +
labs(
title = "Sobol Sensitivity Indices",
x = "Parameter",
y = "Sobol Index",
fill = "Index Type"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
# Example scatter plot for humidity vs. mean temperature
ggplot(data_clean, aes(x = humidity, y = meantemp)) +
geom_point(alpha = 0.5) +
labs(
title = "Humidity vs. Mean Temperature",
x = "Humidity",
y = "Mean Temperature"
) +
theme_minimal()
# Create the bar plot
ggplot(sobol_indices_long, aes(x = Parameter, y = Value, fill = Index_Type)) +
geom_bar(stat = "identity", position = position_dodge()) +
labs(
title = "Sobol Sensitivity Indices",
x = "Parameter",
y = "Sobol Index",
fill = "Index Type"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
# Print sensitivity indices
print(sobol_results)
library(dplyr)
#library(tidyr)
library(sensitivity)
library(randtoolbox)
data <- read.csv("DailyDelhiClimateTest.csv", stringsAsFactors = FALSE)
data_clean<-data %>% drop_na() #removing rows with missing values
write.csv(data_clean,"data_clean.csv",row.names = FALSE) # Save the cleaned data
head(data_clean)
lm_model<-lm(meantemp~humidity + wind_speed + meanpressure,data = data_clean) #Fit a linear regression model
# View the summary of the model
summary(lm_model)
# Define parameter ranges for Sobol sequences
humidity_range <- range(data_clean$humidity)
wind_speed_range <- range(data_clean$wind_speed)
meanpressure_range <- range(data_clean$meanpressure)
#Sobol sequences
sobol_sequence_X1 <- sobol(n=1000, dim = 3, init = TRUE)
sobol_sequence_X2 <- sobol(n=1000, dim = 3, init = FALSE)
# Scale Sobol sequences to the parameter ranges and convert to data frames
lower_bounds <- c(humidity_range[1], wind_speed_range[1], meanpressure_range[1])
upper_bounds <- c(humidity_range[2], wind_speed_range[2], meanpressure_range[2])
X1 <- as.data.frame(t(t(sobol_sequence_X1)*(upper_bounds - lower_bounds)+lower_bounds))
X2 <- as.data.frame(t(t(sobol_sequence_X2)*(upper_bounds - lower_bounds)+lower_bounds))
sobol_model <- function(X) {
predicted_meantemp <- predict(lm_model, newdata = data.frame(humidity = X[, 1],
wind_speed = X[, 2],
meanpressure = X[, 3]))
return(predicted_meantemp)
}
# Perform Sobol sensitivity analysis
sobol_results <- sobol2007(model = sobol_model,
X1 = X1,  X2 = X2,
nboot = 1000
)
# Print sensitivity indices
print(sobol_results)
library(ggplot2)
# Extract Sobol indices from the results
sobol_indices <- data.frame(
Parameter = c("Humidity", "Wind Speed", "Mean Pressure"),
First_Order = sobol_results$S[, 1],  # First-order indices
Total_Order = sobol_results$T[, 1]   # Total-order indices
)
# Reshape the data for plotting
sobol_indices_long <- sobol_indices %>%
pivot_longer(cols = c(First_Order, Total_Order),
names_to = "Index_Type",
values_to = "Value")
# Create the bar plot
ggplot(sobol_indices_long, aes(x = Parameter, y = Value, fill = Index_Type)) +
geom_bar(stat = "identity", position = position_dodge()) +
labs(
title = "Sobol Sensitivity Indices",
x = "Parameter",
y = "Sobol Index",
fill = "Index Type"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
# Example scatter plot for humidity vs. mean temperature
ggplot(data_clean, aes(x = humidity, y = meantemp)) +
geom_point(alpha = 0.5) +
labs(
title = "Humidity & Mean Temperature",
x = "Humidity",
y = "Mean Temperature"
) +
theme_minimal()
